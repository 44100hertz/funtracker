* Song Architecture
** Data Types
*** Numbers
 - decimal floating-point numbers, counting from 1
 - ~8m, 8c, .8, 8, 80, 8h, 8k~ are all possible power levels, in order
 - stacking; ~.1m~ considered valid, etc.
 - using only + or - will increment or decrement the value

*** Boolean values
 - ~y/t/1~ true
 - ~n/f/0~ false
 - will always normalize to 0/1 after entry

*** id's
An id is short for a string name.
Non-base32 chars are ignored.
If you want to make an instrument unique, you can number it.

examples
#+BEGIN_EXAMPLE
"piano"
  p, pi, pia, ... = piano

"that", "this" <--bad names
  t, th, ... = that
  thi, ... = this

"0that", "1this"
  0 = 0that
  1 = 1this
#+END_EXAMPLE
** Samples
Samples are headerless mono signed PCM in a separate file.

** Instruments
Instruments are commands that replace any part of the channel state.
They can have arbitrary precision/size; for example 48.3002 is valid here.

Example
#+BEGIN_EXAMPLE
  init: 3 41h 548k 6 7 8 9 g ha-
  note: p a50
#+END_EXAMPLE

Inferred meaning
#+BEGIN_EXAMPLE
init          ; do the following on instrument load
  30 4100     ; 100 long sample at 0
  548000      ; sample rate 48khz
  60 7100     ; loop entire sample
  8f          ; loop forward
  8100        ; no volume adjustment
  gc001 ha-01 ; patch to ramp volume down over 1 second

note          ; do the folowing on each note played
  p0          ; play from start of sample
  a50         ; start at 50% mixer volume
#+END_EXAMPLE

** Macros
A list of note macros is defined for each song.
Macros are executed at one tick per command.

Syntax
#+BEGIN_EXAMPLE
[num]  single-digit numbers play a note at base note + n, then tick
.n     tick n times; default 1
+n     add n to the base note; default 1
-n     subtract n from the base note; default 1
>      add half an octave to the base note
<      subtract half an octave from the base note
n      new note before next tick
o      note off after next tick
k      note off after next tick, end macro here
e      end macro (otherwise repeat)
#+END_EXAMPLE

Examples
#+BEGIN_EXAMPLE
037      arpeggio triplet
<037     lower triplet
n        repeat note forever
k        delay note off by 1
.k       delay note off by 2
+1       glissando up
-1       glissando down
#+END_EXAMPLE

** Song data
Songs are stored in a whitespace-aware plaintext.
They're almost exactly what you see in the tracker.
See example-song for what they could look like.

*** Patterns
Every pattern of a song has a name that's referencable as an id.

Command format ~N-O / cXXXX~
#+BEGIN_EXAMPLE
N   note letter
O   octave
c   the base id; what to modify
X   4 chars of params
#+END_EXAMPLE

*** Order
Syntax
#+BEGIN_EXAMPLE
[id]    which order to play
[       start of loop
]       end of loop
#+END_EXAMPLE

Examples
#+BEGIN_EXAMPLE
[ a b a c ]    traditional song structure
intro [body]   a song with an intro and body
#+END_EXAMPLE
** List of Commands/Params
*** Internal
~0n~ live channel output. Set by song if ~{4}~ > 0 and ~{5}~ > 0.
Default 0.

~1i~ load instrument. Sets and initializes. Default {2}

~2i~ set instrument. Sets w/o initializing. Default 0.

~3n~ sample offset in points. Default 0.

~4n~ sample length. Default 0

~5n~ sample rate. Controls how quickly phase ~{p}~ increases.
Default 16000.

~6n~ loop start. Default 0 = start of sample.

~7n~ loop length. Default is ~{4}~.

~8L~ loop type. f=forward (default); p=pingpong; b=backward.

~9n~ volume base multiplier = n / 100. Default 100 = 1x

*** Playback
~an~ mixer volume. Ratio = n / 800. Default 100=1/8.

~dn~ panning. d100=fully right, d-100 = fully left. Default 0.

~tn~ tuning adjustment. t100=full note up. Default 0.

~pn~ live phase in points. Set if {4} > 0  and {5} > 0.

~nn~ whole note pitch, typically set by note column.

~c*~ "create" macro * and run it here.

~mi~ Run macro i. Default 0.

*** Patches
input/output fixed pairs: ~ef / gh / jk~

~[e/g/j]*~ input
 - ~cn~ constant value n (default 1)
 - ~[num]d~ channel num, delay d in ms
 - ~ad~ the final mix, delay d in ms
 - ~ln~ an LFO n ticks per sample

~[f/h/k]O*~ output
 - ~O~ output param to modify
 - ~*~ modify method
   - ~=n~ input * n/100; default 100=1.0
   - ~wn~ wet/dry mix;  0=dry, 100=wet; default=50
   - ~+n~ base + input * n/{5}, default 1 = +1/{5}
   - ~-n~ base - input * n/{5}, default 1 = -1/{5}

examples
#+BEGIN_EXAMPLE
~g.... ha-..~ volume slide down 1/10000 per point
~g0... hp...~ total phase modulation from channel 0
~g0... htw20~ frequency modulation from channel 0
~g01k. h0w10~ mix 1000-sample delayed channel 0 into self
#+END_EXAMPLE

*** Channel Misc
~wn~ sample rate at which to grab history, default 16000

~xcb~ clipping mode for mixer, 1=limit to [-1, 1]

*** Control
~jjn~ next row

~jpn~ next pattern

~bn~ song BPM

~rn~ set speed "rate" in ticks per row

~vn~ global volume

*** Unused
~uyl+-~ What could they be for?
